# Best that take two arguments: the 2-character abbreviated name of a state and 
# an outcome name. The function reads the outcome-of-care-measures.csv file and
# returns a character vector with the name of the hospital that has the best 
# (i.e. lowest) 30-day mortality for the specified outcome in that state. The 
# outcomes can be one of "heart attack", "heart failure", or "pneumonia". 
# Hospitals that do not have data on a particular outcome are excluded
# from the set of hospitals when deciding the rankings.
#
# If there is a tie for the best hospital for a given outcome, then the 
# hospital names should be sorted in alphabetical order and the first 
# hospital in that set should be chosen.

best <- function(state, outcome) {
  # Read outcome data
  csv <- read.csv("outcome-of-care-measures.csv", colClasses="character")
  
  # Check the validity of the state argument
  if(!state %in% csv$State){
    stop("invalid state")
  }
  
  # Check the validity of the outcome argument
  valid.outcome <- c('heart attack', 'heart failure', 'pneumonia')
  if(!outcome %in% valid.outcome){
    stop("invalid outcome")
  }
  
  # Subset the CSV by State
  csv <- csv[csv$State == state,]
  
  # Clean up the awful variable names
  names(csv) = gsub("[.]","", names(csv))
    
  # Rename variable we are interested in to "OutcomeRate"
  if(outcome == "heart attack"){
    names(csv)[names(csv) == 'Hospital30DayDeathMortalityRatesfromHeartAttack'] <- 'OutcomeRate'
  } else if(outcome == "heart failure"){
    names(csv)[names(csv) == 'Hospital30DayDeathMortalityRatesfromHeartFailure'] <- 'OutcomeRate'
  } else {
    names(csv)[names(csv) == 'Hospital30DayDeathMortalityRatesfromPneumonia'] <- 'OutcomeRate'
  }
  
  # Only keep HospitalName and OutcomeRate
  csv <- csv[c("HospitalName", "OutcomeRate")]
  
  # Change the OutcomeRate to a numeric w/o any warnings about NAs introduced by coercion
  csv$OutcomeRate <- suppressWarnings(as.numeric(csv$OutcomeRate))
  
  # Find the "best" outcome rate by sorting the results
  attach(csv, warn.conflicts = FALSE)
  csv <- csv[order(OutcomeRate,HospitalName),]  
  
  # Return hospital name in that state with lowest 30-day death
  # rate
  csv$HospitalName[1]
}
best <- function(state, outcome) {
    
    ## Reads outcome data
    file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
    
    ## Checks that state and outcome are valid
    valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
    valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
    if (!is.element(state, valid_states)) stop("invalid state")
    if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
    
    ## Returns hospital name in that state with lowest 30-day death
    data <- file_data[file_data$State == state,]
    header_name <- NULL
    if (outcome == "heart attack") {
        header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
    } else if (outcome == "heart failure") {
        header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
    } else {
        header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
    }
    mortality_rate <- data[,header_name]
    mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
    mortality_rate <- as.numeric(as.character(mortality_rate))
    min_rate <- min(mortality_rate)
    best_hosps <- data[data[,header_name] == min_rate,]
    hosp_names <- sort(best_hosps[,"Hospital.Name"])
    return(as.character(hosp_names[1]))
}

best <- function(state, outcome) {
        ## Read outcome data
        outcomes <- read.csv("outcome-of-care-measures.csv")
        ## Check that state and outcome are valid
        if (!(state %in% outcomes[,7])) stop("invalid state")
        ill <- switch(outcome, "heart attack"=11, "heart failure"=17, "pneumonia"=23, 0)
        if (ill == 0) stop("invalid outcome")
        ## Return hospital name in that state with lowest 30-day death
        ## rate
        range <- outcomes[outcomes[['State']]==state,]
        nnarange <- range[range[,ill]!="Not Available",]
        bests <- nnarange[nnarange[,ill]==min(as.numeric(as.character(nnarange[,ill]))),]
        as.character(if(length(best)==46) bests[['Hospital.Name']]
                     else bests[bests[,2]==min(as.character(bests[,2])),][[2]])
}

best <- function(state, outcome) {
  
  if (! outcome %in% c("pneumonia", "heart attack", "heart failure")) stop("invalid outcome")
  
  outcome_data <- read.csv("outcome-of-care-measures.csv", stringsAsFactors=FALSE)

  outcome_for_state<-subset(outcome_data, State==state)  
  if(nrow(outcome_for_state) < 1) stop("invalid state")
  
  outcome_column_regex<-paste("^Hospital.30.Day.Death..mortality.*", sub(" ", ".", outcome), sep="")
  outcome_column<-grep(outcome_column_regex,colnames(outcome_data), ignore.case=TRUE, value=TRUE)
  hospitals<-subset(outcome_for_state, select=c("Hospital.Name", outcome_column), )
  colnames(hospitals)<-c("name", "deaths")
  hospitals$deaths<-suppressWarnings(as.numeric(hospitals$deaths))
  best<-hospitals[order(hospitals$deaths, hospitals$name),]
  best[1,1]
}
rankhospital <- function(state, outcome, num="best") {
  
  if (! outcome %in% c("pneumonia", "heart attack", "heart failure")) stop("invalid outcome")
  
  outcome_data <- read.csv("outcome-of-care-measures.csv", stringsAsFactors=FALSE)
  
  outcome_for_state<-subset(outcome_data, State==state)  
  if(nrow(outcome_for_state) < 1) stop("invalid state")
  
  outcome_column_regex<-paste("^Hospital.30.Day.Death..mortality.*", sub(" ", ".", outcome), sep="")
  outcome_column<-grep(outcome_column_regex,colnames(outcome_data), ignore.case=TRUE, value=TRUE)
  hospitals<-subset(outcome_for_state, select=c("Hospital.Name", outcome_column), )
  colnames(hospitals)<-c("name", "deaths")
  hospitals$deaths<-suppressWarnings(as.numeric(hospitals$deaths))
  best<-hospitals[order(hospitals$deaths, hospitals$name),]
  best<-subset(best,!is.na(best$deaths))
  
  if (num=="best") num<-1
  if (num=="worst") num<-nrow(best)
  best[num,1]
}
rankhospital <- function(state, outcome, num = "best") {
    
    ## Reads outcome data
    file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
    
    ## Checks that state and outcome are valid
    valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
    valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
    if (!is.element(state, valid_states)) stop("invalid state")
    if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
    
    ## Returns hospital name in that state with lowest 30-day death
    data <- file_data[file_data$State == state,]
    header_name <- NULL
    if (outcome == "heart attack") header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
    else if (outcome == "heart failure") header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
    else header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"

    sorted_data <- data[order(as.numeric(as.character(data[,header_name])), as.character(data[,"Hospital.Name"])),]
    sorted_data <- sorted_data[!sorted_data[,header_name] == "Not Available",]
    if (num == "best") {
        return(best(state, outcome))
    } else if (num == "worst") {
        return(tail(as.character(sorted_data[,"Hospital.Name"]), n = 1))
    }
    return(as.character(sorted_data[,"Hospital.Name"][num]))
}

rankall <- function(outcome, num = "best") {
    
    ## Reads outcome data
    file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
    
    ## Checks that state and outcome are valid
    valid_states <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")
    valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
    if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
    
    header_name <- NULL
    if (outcome == "heart attack") header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
    else if (outcome == "heart failure") header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
    else header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
    
    hosps <- c()
    states <- c()
    
    ## For each state, finds the hospital of the given rank
    for (state in valid_states) {
        ranked_hosp <- c()
        data <- file_data[file_data$State == state,]        
        sorted_data <- data[order(as.numeric(as.character(data[,header_name])), as.character(data[,"Hospital.Name"])),]
        sorted_data <- sorted_data[!sorted_data[,header_name] == "Not Available",]
        if (num == "best") {
            ranked_hosp <- best(state, outcome)
        } else if (num == "worst") {
            ranked_hosp <- as.character(tail(sorted_data[,"Hospital.Name"], n = 1))
        } else {
            ranked_hosp <- as.character(sorted_data[,"Hospital.Name"][num])
        }
        hosps <- c(hosps, ranked_hosp)
    }
    result <- data.frame(hosps, valid_states)
    colnames(result) <- c("hospital", "state")
    return(result)
}
rankhospital <- function(state, outcome, num = "best") {
 
  
  ## Check that state and outcome are valid
  if (outcome=="heart attack"){
    outcome.number<-11  
  }else if(outcome=="heart failure"){
    outcome.number<-17
  }else if(outcome=="pneumonia"){
    outcome.number<-23
  }else{
    stop("invalid outcome")
  }
  
  #Create array of states
  tempState <- data.frame(table(outcomedata$State))
  tempState<- sapply(tempState, as.character)
  
  #Test is state parameter is in table
  if(!(state %in% tempState)){
    stop("invalid state")
  }
  
  ## Return hospital name in that state with lowest 30-day death
  ## rate
  
  outcomeTemp<-subset(outcomedata, State == state)
  outcomeTemp<-subset(outcomeTemp, outcomeTemp[,outcome.number] != "Not Available")
  outcomeTemp<-outcomeTemp[order(outcomeTemp[,outcome.number], outcomeTemp[,"Hospital.Name"], na.last = TRUE),]

  #check if best, worst, or an integer and that the num isn't greater than the number of rows
  if (num == "best"){
    return(outcomeTemp[1,"Hospital.Name"])    
  }else if (num == "worst"){
    return(outcomeTemp[nrow(outcomeTemp), "Hospital.Name"])
  }else if (num > nrow(outcomeTemp)){
    return(NA)
  }else{
    return(outcomeTemp[num,"Hospital.Name"])  
  }
}

rankall <- function(outcome, num = "best") {
    outcomedata <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
    outcomedata[, 11] <- as.numeric(outcomedata[, 11])
    outcomedata[, 17] <- as.numeric(outcomedata[, 17])
    outcomedata[, 23] <- as.numeric(outcomedata[, 23])
    
    tempState <- data.frame(table(outcomedata$State))
    tempState<- sapply(tempState, as.character)
    
    
    rankAllDf <- data.frame(hospital=character(), state=character(), stringsAsFactors=FALSE)
    for(i in tempState[,1]){
      tempRank<-rankhospital(i, outcome, num)
      tempfr <- data.frame(hospital = tempRank, state = i)
      rankAllDf <- rbind(rankAllDf, tempfr)
    }
    return(rankAllDf)
}
best <- function(state, outcome) {
  ## Read outcome data
  outcomedata <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
  outcomedata[, 11] <- as.numeric(outcomedata[, 11])
  outcomedata[, 17] <- as.numeric(outcomedata[, 17])
  outcomedata[, 23] <- as.numeric(outcomedata[, 23])
  
  ## Check that state and outcome are valid
  if (outcome=="heart attack"){
    outcome.number<-11  
  }else if(outcome=="heart failure"){
    outcome.number<-17
  }else if(outcome=="pneumonia"){
    outcome.number<-23
  }else{
    stop("invalid outcome")
  }
  
  #Create array of states
  tempState <- data.frame(table(outcomedata$State))
  tempState<- sapply(tempState, as.character)
  
  #Test is state parameter is in table
  if(!(state %in% tempState)){
    stop("invalid state")
  }
  
  ## Return hospital name in that state with lowest 30-day death
  ## rate
  outcomeTemp<-subset(outcomedata, State == state)
  outcomeTemp<-outcomeTemp[order(outcomeTemp[,outcome.number], outcomeTemp[,"Hospital.Name"]),]
  
  return(outcomeTemp[1,"Hospital.Name"])
}
rankhospital <- function(state, outcome, num = "best") {
  ## Read outcome data
  outcomedata <- read.csv("ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
  outcomedata[, 11] <- as.numeric(outcomedata[, 11])
  outcomedata[, 17] <- as.numeric(outcomedata[, 17])
  outcomedata[, 23] <- as.numeric(outcomedata[, 23])
  
  ## Check that state and outcome are valid
  if (outcome=="heart attack"){
    outcome.number<-11  
  }else if(outcome=="heart failure"){
    outcome.number<-17
  }else if(outcome=="pneumonia"){
    outcome.number<-23
  }else{
    stop("invalid outcome")
  }
  
  #Create array of states
  tempState <- data.frame(table(outcomedata$State))
  tempState<- sapply(tempState, as.character)
  
  #Test is state parameter is in table
  if(!(state %in% tempState)){
    stop("invalid state")
  }
  
  ## Return hospital name in that state with lowest 30-day death
  ## rate
  outcomeTemp<-subset(outcomedata, State == state)
  outcomeTemp<-subset(outcomeTemp, outcomeTemp[,outcome.number] != "Not Available")
  outcomeTemp<-outcomeTemp[order(outcomeTemp[,outcome.number], outcomeTemp[,"Hospital.Name"], na.last = TRUE),]
  
  #check if best, worst, or an integer and that the num isn't greater than the number of rows
  if (num == "best"){
    return(outcomeTemp[1,"Hospital.Name"])    
  }else if (num == "worst"){
    return(outcomeTemp[nrow(outcomeTemp), "Hospital.Name"])
  }else if (num > nrow(outcomeTemp)){
    return(NA)
  }else{
    return(outcomeTemp[num,"Hospital.Name"])  
  }
}
rankhospital <- function(state, outcome, num = "best") {
        ## Read outcome data
        outcomes <- read.csv("outcome-of-care-measures.csv")
        ## Check that state and outcome are valid
        if (!(state %in% outcomes[,7])) stop("invalid state")
        ill <- switch(outcome, "heart attack"=11, "heart failure"=17, "pneumonia"=23, 0)
        if (ill == 0) stop("invalid outcome")
        ## Return hospital name in that state with the given rank
        ## 30-day death rate
        range <- outcomes[outcomes[['State']]==state,]
        nnarange <- range[range[,ill]!="Not Available",]
        num <- switch(as.character(num), "best"=1, "worst"=nrow(nnarange), num)
        if(num>nrow(nnarange)) NA else
        as.character(nnarange[order(as.numeric(as.character(nnarange[,ill])),nnarange[[2]])[num],2])
}
rankhospital <- function(state, outcome, num = "best") {
        ## Read outcome data
        outcomes <- read.csv("outcome-of-care-measures.csv")
        ## Check that state and outcome are valid
        if (!(state %in% outcomes[,7])) stop("invalid state")
        ill <- switch(outcome, "heart attack"=11, "heart failure"=17, "pneumonia"=23, 0)
        if (ill == 0) stop("invalid outcome")
        ## Return hospital name in that state with the given rank
        ## 30-day death rate
        range <- outcomes[outcomes[['State']]==state,]
        nnarange <- range[range[,ill]!="Not Available",]
        num <- switch(as.character(num), "best"=1, "worst"=nrow(nnarange), num)
        if(num>nrow(nnarange)) NA else
        as.character(nnarange[order(as.numeric(as.character(nnarange[,ill])),nnarange[[2]])[num],2])
}
1. best 
best<-function(state,outcome){
dir<-getwd();directory2<-paste(c(dir,"/outcome-of-care-measures.csv"),collapse='')
a<-read.csv(directory2,na.strings="Not Available");b<-a[,c(2,7,11,17,23)]
colnames(b)<-c("hospitalname","state1","heartattack","heartfailure","pneumonia")
b$hospitalname<-as.character(b$hospitalname);x1<-subset(b,b$state1==state)
if (nrow(x1)==0)
{
    stop("invalid state")
}
if (outcome!="heart attack" && outcome!="heart failure" && outcome!="pneumonia")
{
    stop("invalid outcome")
}
if (outcome=="heart attack")
{
    bad<-is.na(x1$heartattack)
    x2<-x1[!bad,]
    x3<-subset(x2,heartattack==min(x2$heartattack))
}
if (outcome=="heart failure")
{
    bad<-is.na(x1$heartfailure)
    x2<-x1[!bad,]
    x3<-subset(x2,heartfailure==min(x2$heartfailure))
}
if (outcome=="pneumonia")
{
    bad<-is.na(x1$pneumonia)
    x2<-x1[!bad,]
    x3<-subset(x2,pneumonia==min(x2$pneumonia))
}
x4<-x3$hospitalname;x5<-as.character(sort(x4))
return (x5[1])
}
2. rankhospital

rankhospital<-function(state,outcome,num){
dir<-getwd();directory2<-paste(c(dir,"/outcome-of-care-measures.csv"),collapse='')
a<-read.csv(directory2,na.strings="Not Available");b<-a[,c(2,7,11,17,23)]
colnames(b)<-c("hospitalname","state1","heartattack","heartfailure","pneumonia")
b$hospitalname<-as.character(b$hospitalname);x1<-subset(b,b$state1==state)
if (num=="best"){
    num<-1
}
if (nrow(x1)==0){
    stop("invalid state")
}
if (outcome!="heart attack" && outcome!="heart failure" && outcome!="pneumonia"){
    stop("invalid outcome")
}
if (outcome=="heart attack"){
    bad<-is.na(x1$heartattack)
    x2<-x1[!bad,]
    if (num=="worst"){
        num<-nrow(x2)
    }
    x3<-order(x2$heartattack,x2$hospitalname);x4<-x2[x3[1:num],]
}
if (outcome=="heart failure"){
    bad<-is.na(x1$heartfailure);x2<-x1[!bad,]
    if (num=="worst"){
        num<-nrow(x2)
    }
    x3<-order(x2$heartfailure,x2$hospitalname);x4<-x2[x3[1:num],]
}
if (outcome=="pneumonia"){
    bad<-is.na(x1$pneumonia);x2<-x1[!bad,]
    if (num=="worst"){
        num<-nrow(x2)
    }
    x3<-order(x2$pneumonia,x2$hospitalname);x4<-x2[x3[1:num],]
}
x5<-x4$hospitalname;return(x5[nrow(x4)])
}
3. rankall

rankall<-function(outcome,num="best"){
dir<-getwd();source("rankhospital.R")
directory2<-paste(c(dir,"/outcome-of-care-measures.csv"),collapse='')
a<-read.csv(directory2,na.strings="Not Available");b<-a[,c(2,7,11,17,23)]
colnames(b)<-c("hospital","state","heartattack","heartfailure","pneumonia")
b$hospital<-as.character(b$hospital)
if (outcome!="heart attack" && outcome!="heart failure" && outcome!="pneumonia"){
    stop("invalid outcome")
}
statelist<-unique(b$state);statelist<-as.character(statelist);statelist<-sort(statelist)
hosp<-vector();st<-vector()
for (i in 1:length(statelist)){
    hosp[i]<-rankhospital(state=statelist[i],outcome=outcome,num=num)
    st[i]<-statelist[i]
}
data<-data.frame(hospital=hosp,state=st)
return (data)
}
rankall <- function(outcome, num = "best") {
  # Read outcome data
  csv <- read.csv("outcome-of-care-measures.csv", colClasses="character")
  
  # Set up the data frame that will hold the results
  s <- csv$State  # Get the states 
  s <- s[!duplicated(s) ]  # Remove the duplicates
  df <- data.frame(hospital = c(NA),state = s)  # Build the data frame
  df <- df[order(state),]  # Sort alphabetically
  row.names(df) <- df$state  # Rename the row names
  
  # Check the validity of the outcome argument
  valid.outcome <- c('heart attack', 'heart failure', 'pneumonia')
  if(!outcome %in% valid.outcome){
    stop("invalid outcome")
  }

  # Clean up the awful variable names
  names(csv) = gsub("[.]","", names(csv))
  
  # Rename variable we are interested in to "OutcomeRate"
  if(outcome == "heart attack"){
    names(csv)[names(csv) == 'Hospital30DayDeathMortalityRatesfromHeartAttack'] <- 'OutcomeRate'
  } else if(outcome == "heart failure"){
    names(csv)[names(csv) == 'Hospital30DayDeathMortalityRatesfromHeartFailure'] <- 'OutcomeRate'
  } else {
    names(csv)[names(csv) == 'Hospital30DayDeathMortalityRatesfromPneumonia'] <- 'OutcomeRate'
  }
  
  # Only keep HospitalName and OutcomeRate
  csv <- csv[c("HospitalName", "OutcomeRate","State")]
  
  # Change the OutcomeRate to a numeric w/o any warnings about NAs introduced by coercion
  csv$OutcomeRate <- suppressWarnings(as.numeric(csv$OutcomeRate))
  
  # Remove the NAs
  csv <- csv[!is.na(csv$OutcomeRate),]
  
  # Sort the data for ranking
  attach(csv, warn.conflicts = FALSE)
  if(num == "worst"){
    # Sort with the worst outcomes at the top
    csv <- csv[order(State, -OutcomeRate, HospitalName),]
    
    # Rank the hospitals in groups
    csv$Rank <- ave(csv$OutcomeRate, csv$State, FUN=function(x)rank(-x,ties.method= "first"))
    
    # Set the index for the worst
    num <- 1
    
  } else{
    # Sort with the best outcomes at the top
    csv <- csv[order(State, OutcomeRate, HospitalName),]
    
    # Rank the hospitals in groups
    csv$Rank <- ave(csv$OutcomeRate, csv$State, FUN=function(x)rank(x,ties.method= "first"))
    
    if(num == "best"){
      # Set the index for the best
      num <- 1
    }
  }
  
  
  # Only keep the ranking we care about
  csv <- csv[csv$Rank == num,]
  
  # Update the data frame with the hospital names
  df$hospital <- csv[match(df$state, csv$State),1]
  
  # Return a data frame with the hospital names and the
  # (abbreviated) state name
  df
}
